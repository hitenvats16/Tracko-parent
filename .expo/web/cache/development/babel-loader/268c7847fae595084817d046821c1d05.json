{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport createIconSet, { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./create-icon-set\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createMultiStyleIconSet(styles) {\n  var optionsInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  var options = _objectSpread({\n    defaultStyle: styleNames[0],\n    fallbackFamily: function fallbackFamily() {\n      return styleNames[0];\n    },\n    glyphValidator: function glyphValidator() {\n      return true;\n    }\n  }, optionsInput);\n\n  var iconSets = styleNames.reduce(function (acc, name) {\n    var style = styles[name];\n    acc[name] = createIconSet(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(function (result, propName) {\n      return styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result;\n    }, options.defaultStyle);\n  }\n\n  function getIconSetForProps(props) {\n    var name = props.name;\n    var style = styleFromProps(props);\n    if (options.glyphValidator(name, style)) return iconSets[style];\n    var family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce(function (acc, prop) {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name ? iconSets[styleFromProps(_defineProperty({}, style, true))] : getIconSetForProps(_defineProperty({\n      name: name\n    }, style, true));\n  }\n\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    var style = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : options.defaultStyle;\n    return getStyledIconSet(style, name).getImageSource(name, size, color);\n  }\n\n  function getFontFamily() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name) {\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.defaultStyle;\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass() {\n    var selectClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    var IconClass = function (_PureComponent) {\n      _inherits(IconClass, _PureComponent);\n\n      var _super = _createSuper(IconClass);\n\n      function IconClass() {\n        _classCallCheck(this, IconClass);\n\n        return _super.apply(this, arguments);\n      }\n\n      _createClass(IconClass, [{\n        key: \"render\",\n        value: function render() {\n          var selectedIconSet = getIconSetForProps(this.props);\n          var SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n          var props = reduceProps(this.props);\n          return _jsx(SelectedIconClass, _objectSpread({}, props));\n        }\n      }]);\n\n      return IconClass;\n    }(PureComponent);\n\n    IconClass.propTypes = styleNames.reduce(function (acc, name) {\n      acc[name] = PropTypes.bool;\n      return acc;\n    }, {});\n    IconClass.defaultProps = styleNames.reduce(function (acc, name) {\n      acc[name] = false;\n      return acc;\n    }, {});\n    return IconClass;\n  }\n\n  var Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  Icon.getStyledIconSet = getStyledIconSet;\n  Icon.getImageSource = getImageSource;\n  Icon.getFontFamily = getFontFamily;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.hasIcon = hasIcon;\n  return Icon;\n}","map":{"version":3,"sources":["/home/hiten/Documents/Tracko-parent/node_modules/react-native-vector-icons/lib/create-multi-style-icon-set.js"],"names":["React","PureComponent","PropTypes","createIconSet","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","createMultiStyleIconSet","styles","optionsInput","styleNames","Object","keys","length","Error","options","defaultStyle","fallbackFamily","glyphValidator","iconSets","reduce","acc","name","style","glyphMap","fontFamily","fontFile","fontStyle","styleFromProps","props","result","propName","indexOf","getIconSetForProps","family","selectIconClass","iconSet","iconClass","reduceProps","prop","getStyledIconSet","getImageSource","size","color","getFontFamily","getRawGlyphMap","hasIcon","createStyledIconClass","selectClass","IconClass","selectedIconSet","SelectedIconClass","propTypes","bool","defaultProps","Icon","Button"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport createIconSet, {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from './create-icon-set';\n\nexport default function createMultiStyleIconSet(styles, optionsInput = {}) {\n  const styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  const options = {\n    defaultStyle: styleNames[0],\n    fallbackFamily: () => styleNames[0],\n    glyphValidator: () => true,\n    ...optionsInput,\n  };\n\n  const iconSets = styleNames.reduce((acc, name) => {\n    const style = styles[name];\n\n    acc[name] = createIconSet(\n      style.glyphMap || {},\n      style.fontFamily || '',\n      style.fontFile || '',\n      style.fontStyle || {}\n    );\n\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(\n      (result, propName) =>\n        styleNames.indexOf(propName) !== -1 && props[propName] === true\n          ? propName\n          : result,\n      options.defaultStyle\n    );\n  }\n\n  function getIconSetForProps(props) {\n    const { name } = props;\n    const style = styleFromProps(props);\n\n    if (options.glyphValidator(name, style)) return iconSets[style];\n\n    const family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce((acc, prop) => {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style, name = '') {\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name\n      ? iconSets[styleFromProps({ [style]: true })]\n      : getIconSetForProps({ name, [style]: true });\n  }\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR,\n    style = options.defaultStyle\n  ) {\n    return getStyledIconSet(style, name).getImageSource(name, size, color);\n  }\n\n  function getFontFamily(style = options.defaultStyle) {\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap(style = options.defaultStyle) {\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name, style = options.defaultStyle) {\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass(selectClass = '') {\n    class IconClass extends PureComponent {\n      static propTypes = styleNames.reduce((acc, name) => {\n        acc[name] = PropTypes.bool;\n        return acc;\n      }, {});\n\n      static defaultProps = styleNames.reduce((acc, name) => {\n        acc[name] = false;\n        return acc;\n      }, {});\n\n      render() {\n        const selectedIconSet = getIconSetForProps(this.props);\n        const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n        const props = reduceProps(this.props);\n\n        return <SelectedIconClass {...props} />;\n      }\n    }\n\n    return IconClass;\n  }\n\n  const Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  Icon.getStyledIconSet = getStyledIconSet;\n  Icon.getImageSource = getImageSource;\n  Icon.getFontFamily = getFontFamily;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.hasIcon = hasIcon;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}