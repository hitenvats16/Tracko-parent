{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Button } from \"@rneui/base\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { db } from \"../firebase\";\nimport { ref, child, get, set, onValue } from \"firebase/database\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function RoomId() {\n  var navigation = useNavigation();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      roomId = _useState2[0],\n      setRoomId = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shown = _useState4[0],\n      setShown = _useState4[1];\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerShown: false\n    });\n  }, []);\n  return _jsxs(View, {\n    style: styles.cont,\n    children: [_jsx(Text, {\n      style: styles.text,\n      children: \"Enter Your Room Id\"\n    }), _jsx(TextInput, {\n      placeholder: \"RoomId\",\n      style: styles.inputbox,\n      maxLength: 10,\n      onChangeText: function onChangeText(val) {\n        setRoomId(val);\n      },\n      value: roomId\n    }), _jsx(Button, {\n      title: \"Join Room\",\n      onPress: function _callee() {\n        var dbRef;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dbRef = ref(db);\n                get(child(dbRef, roomId)).then(function (val) {\n                  if (val.exists()) navigation.navigate(\"MainScreen\", {\n                    title: roomId\n                  });else setShown(true);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      disabled: !roomId\n    }), shown && _jsx(Text, {\n      style: {\n        color: \"red\",\n        paddingTop: 10\n      },\n      children: \"Room Doesn't Exist\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  cont: {\n    flex: 1,\n    backgroundColor: \"#06113C\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  text: {\n    color: \"white\",\n    paddingBottom: 10\n  },\n  inputbox: {\n    backgroundColor: \"#9db0fc\",\n    width: 200,\n    height: 40,\n    borderRadius: 10,\n    padding: 10,\n    textAlign: \"center\",\n    marginBottom: 10\n  }\n});","map":{"version":3,"sources":["/home/hiten/Documents/Tracko-parent/screens/RoomId.js"],"names":["useNavigation","Button","useEffect","useLayoutEffect","useState","db","ref","child","get","set","onValue","RoomId","navigation","roomId","setRoomId","shown","setShown","setOptions","headerShown","styles","cont","text","inputbox","val","dbRef","then","exists","navigate","title","color","paddingTop","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","paddingBottom","width","height","borderRadius","padding","textAlign","marginBottom"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,QAArC,QAAqD,OAArD;;;;;AAEA,SAASC,EAAT;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,OAA/B,QAA8C,mBAA9C;;;AAEA,OAAO,SAASC,MAAT,GAAkB;AACvB,MAAMC,UAAU,GAAGZ,aAAa,EAAhC;;AACA,kBAA4BI,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOS,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0BV,QAAQ,CAAC,KAAD,CAAlC;AAAA;AAAA,MAAOW,KAAP;AAAA,MAAcC,QAAd;;AAEAb,EAAAA,eAAe,CAAC,YAAM;AACpBS,IAAAA,UAAU,CAACK,UAAX,CAAsB;AACpBC,MAAAA,WAAW,EAAE;AADO,KAAtB;AAGD,GAJc,EAIZ,EAJY,CAAf;AAMA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,IAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA,MADF,EAEE,KAAC,SAAD;AACE,MAAA,WAAW,EAAC,QADd;AAEE,MAAA,KAAK,EAAEF,MAAM,CAACG,QAFhB;AAGE,MAAA,SAAS,EAAE,EAHb;AAIE,MAAA,YAAY,EAAE,sBAACC,GAAD,EAAS;AACrBT,QAAAA,SAAS,CAACS,GAAD,CAAT;AACD,OANH;AAOE,MAAA,KAAK,EAAEV;AAPT,MAFF,EAWE,KAAC,MAAD;AACE,MAAA,KAAK,EAAE,WADT;AAEE,MAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACDW,gBAAAA,KADC,GACOlB,GAAG,CAACD,EAAD,CADV;AAEPG,gBAAAA,GAAG,CAACD,KAAK,CAACiB,KAAD,EAAOX,MAAP,CAAN,CAAH,CAAyBY,IAAzB,CAA8B,UAAAF,GAAG,EAAE;AAC/B,sBAAGA,GAAG,CAACG,MAAJ,EAAH,EAAiBd,UAAU,CAACe,QAAX,CAAoB,YAApB,EAAiC;AAC9CC,oBAAAA,KAAK,EAAEf;AADuC,mBAAjC,EAAjB,KAGKG,QAAQ,CAAC,IAAD,CAAR;AACR,iBALD;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFX;AAWE,MAAA,QAAQ,EAAE,CAACH;AAXb,MAXF,EAwBGE,KAAK,IACJ,KAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLc,QAAAA,KAAK,EAAE,KADF;AAELC,QAAAA,UAAU,EAAE;AAFP,OADT;AAAA;AAAA,MAzBJ;AAAA,IADF;AAqCD;AAED,IAAMX,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,IAAI,EAAE;AACJa,IAAAA,IAAI,EAAE,CADF;AAEJC,IAAAA,eAAe,EAAE,SAFb;AAGJC,IAAAA,cAAc,EAAE,QAHZ;AAIJC,IAAAA,UAAU,EAAE;AAJR,GADyB;AAO/Bf,EAAAA,IAAI,EAAE;AACJQ,IAAAA,KAAK,EAAE,OADH;AAEJQ,IAAAA,aAAa,EAAE;AAFX,GAPyB;AAW/Bf,EAAAA,QAAQ,EAAE;AACRY,IAAAA,eAAe,EAAE,SADT;AAERI,IAAAA,KAAK,EAAE,GAFC;AAGRC,IAAAA,MAAM,EAAE,EAHA;AAIRC,IAAAA,YAAY,EAAE,EAJN;AAKRC,IAAAA,OAAO,EAAE,EALD;AAMRC,IAAAA,SAAS,EAAE,QANH;AAORC,IAAAA,YAAY,EAAE;AAPN;AAXqB,CAAlB,CAAf","sourcesContent":["import { useNavigation } from \"@react-navigation/native\";\nimport { Button } from \"@rneui/base\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport { View, StyleSheet, Text, TextInput } from \"react-native\";\nimport { db} from \"../firebase\";\nimport { ref, child, get, set, onValue } from \"firebase/database\";\n\nexport function RoomId() {\n  const navigation = useNavigation();\n  const [roomId, setRoomId] = useState(\"\");\n  const [shown, setShown] = useState(false);\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: false,\n    });\n  }, []);\n\n  return (\n    <View style={styles.cont}>\n      <Text style={styles.text}>Enter Your Room Id</Text>\n      <TextInput\n        placeholder=\"RoomId\"\n        style={styles.inputbox}\n        maxLength={10}\n        onChangeText={(val) => {\n          setRoomId(val);\n        }}\n        value={roomId}\n      />\n      <Button\n        title={\"Join Room\"}\n        onPress={async () => {\n          const dbRef = ref(db);\n          get(child(dbRef,roomId)).then(val=>{\n              if(val.exists()) navigation.navigate(\"MainScreen\",{\n                  title: roomId\n              });\n              else setShown(true);\n          })\n        }}\n        disabled={!roomId}\n      />\n      {shown && (\n        <Text\n          style={{\n            color: \"red\",\n            paddingTop: 10,\n          }}\n        >\n          Room Doesn't Exist\n        </Text>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  cont: {\n    flex: 1,\n    backgroundColor: \"#06113C\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    color: \"white\",\n    paddingBottom: 10,\n  },\n  inputbox: {\n    backgroundColor: \"#9db0fc\",\n    width: 200,\n    height: 40,\n    borderRadius: 10,\n    padding: 10,\n    textAlign: \"center\",\n    marginBottom: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}